#!/bin/bash

#TODO see if I can get pathogen enabled somewhat easily
#REMINDER ssh -o SendEnv=MYVAR server.example.com mycommand (could send envar to generate the sessionid) Sometimes ssh restrics SendEnv... look into this first. 

#The temporary files for your session will live in a directory on the remote machine named $session 
session=""$USER""$RANDOM""

#if you call $0 -s this runs.
setup () 
{

dir=$(cd $(dirname $0); pwd)

if ! [ -d ~/.portable_env ]; then
  mkdir ~/.portable_env || echo "error creating directory"

for x in "$dir"/dotfiles/*;
  do
    if [[ "$x" ]]; then
      ln -s "$x" ~/.portable_env || echo "failed to create symlink $x"
    fi
  done
fi

  if ! [[ -d ~/bin ]]; then
    mkdir ~/bin
  fi

  if ! which cs &> /dev/null; then
    ln -s "$dir"/"$0" ~/bin/cs &> /dev/null || echo "failed to create symlink "$dir"/"$0""
  fi

  if [[ $(which cs) ]]; then
    echo "instalation complete"
  fi

exit 0
}


cs () 
{
  #sanity checks
  if [[ -z $session ]]; then 
    echo "No session genrated, exiting"; exit 1
  fi
  if ! [[ -r ~/.portable_env/bashrc ]]; then 
    echo "Can't find bashrc please run setup first"; exit 1
  fi
  if ! [[ "$@" == *@* ]]; then
    connect="${@:+root@$@}"
  else
    connect="$@"
  fi

#Let's do this
  ssh -t "$connect" "
  mkdir "$session"
  echo "$session" > ~/.session 
  session="$session" 
  echo $'"$(cd ~/.portable_env && tar -chz * | xxd -ps)"' | xxd -ps -r | tar mxz -C "'$session'"/
  bash --noprofile --rcfile ~/"$session"/bashrc
  "
}

usage () 
{
  
  cat << EOF

Description: A wrapper for ssh that uses dotfiles/bashrc as your rcfile
Setup: "$0" -s 
Usage: "$0" user@some.remote.machine.net

If no user is give this script assumes root@some.remote.machine.net
scp's everything in dotfiles/* to the remote machine 
call additional scripts from dotfiles/bashrc
This script traps the files it copies and rm's them on exit

EOF
exit 1
}

if [[ -z "$@" ]]; then usage
fi


while getopts "s" OPTION
do
  case $OPTION in
    s ) setup ;
  esac
done

cs "$@"
        
